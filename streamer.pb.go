// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/chrisccoy/grpc-stream/pkg/streamer/streamer.proto

package grpc_stream // import "github.com/chrisccoy/grpc-stream"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AckMessage struct {
	Ping                 int32    `protobuf:"varint,1,opt,name=ping" json:"ping,omitempty"`
	Pong                 int32    `protobuf:"varint,2,opt,name=pong" json:"pong,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AckMessage) Reset()         { *m = AckMessage{} }
func (m *AckMessage) String() string { return proto.CompactTextString(m) }
func (*AckMessage) ProtoMessage()    {}
func (*AckMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_streamer_ec295e71a8f458d9, []int{0}
}
func (m *AckMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AckMessage.Unmarshal(m, b)
}
func (m *AckMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AckMessage.Marshal(b, m, deterministic)
}
func (dst *AckMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AckMessage.Merge(dst, src)
}
func (m *AckMessage) XXX_Size() int {
	return xxx_messageInfo_AckMessage.Size(m)
}
func (m *AckMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_AckMessage.DiscardUnknown(m)
}

var xxx_messageInfo_AckMessage proto.InternalMessageInfo

func (m *AckMessage) GetPing() int32 {
	if m != nil {
		return m.Ping
	}
	return 0
}

func (m *AckMessage) GetPong() int32 {
	if m != nil {
		return m.Pong
	}
	return 0
}

func init() {
	proto.RegisterType((*AckMessage)(nil), "streamer.AckMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Streamer service

type StreamerClient interface {
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	AckNack(ctx context.Context, opts ...grpc.CallOption) (Streamer_AckNackClient, error)
}

type streamerClient struct {
	cc *grpc.ClientConn
}

func NewStreamerClient(cc *grpc.ClientConn) StreamerClient {
	return &streamerClient{cc}
}

func (c *streamerClient) AckNack(ctx context.Context, opts ...grpc.CallOption) (Streamer_AckNackClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Streamer_serviceDesc.Streams[0], c.cc, "/streamer.Streamer/AckNack", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamerAckNackClient{stream}
	return x, nil
}

type Streamer_AckNackClient interface {
	Send(*AckMessage) error
	Recv() (*AckMessage, error)
	grpc.ClientStream
}

type streamerAckNackClient struct {
	grpc.ClientStream
}

func (x *streamerAckNackClient) Send(m *AckMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *streamerAckNackClient) Recv() (*AckMessage, error) {
	m := new(AckMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Streamer service

type StreamerServer interface {
	// A Bidirectional streaming RPC.
	//
	// Accepts a stream of RouteNotes sent while a route is being traversed,
	// while receiving other RouteNotes (e.g. from other users).
	AckNack(Streamer_AckNackServer) error
}

func RegisterStreamerServer(s *grpc.Server, srv StreamerServer) {
	s.RegisterService(&_Streamer_serviceDesc, srv)
}

func _Streamer_AckNack_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StreamerServer).AckNack(&streamerAckNackServer{stream})
}

type Streamer_AckNackServer interface {
	Send(*AckMessage) error
	Recv() (*AckMessage, error)
	grpc.ServerStream
}

type streamerAckNackServer struct {
	grpc.ServerStream
}

func (x *streamerAckNackServer) Send(m *AckMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *streamerAckNackServer) Recv() (*AckMessage, error) {
	m := new(AckMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Streamer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "streamer.Streamer",
	HandlerType: (*StreamerServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "AckNack",
			Handler:       _Streamer_AckNack_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "github.com/chrisccoy/grpc-stream/pkg/streamer/streamer.proto",
}

func init() {
	proto.RegisterFile("github.com/chrisccoy/grpc-stream/pkg/streamer/streamer.proto", fileDescriptor_streamer_ec295e71a8f458d9)
}

var fileDescriptor_streamer_ec295e71a8f458d9 = []byte{
	// 167 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xb2, 0x49, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x4f, 0xce, 0x28, 0xca, 0x2c, 0x4e, 0x4e, 0xce, 0xaf,
	0xd4, 0x4f, 0x2f, 0x2a, 0x48, 0xd6, 0x2d, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0xd5, 0x2f, 0xc8, 0x4e,
	0xd7, 0x87, 0x30, 0x53, 0x8b, 0xe0, 0x0c, 0xbd, 0x82, 0xa2, 0xfc, 0x92, 0x7c, 0x21, 0x0e, 0x18,
	0x5f, 0xc9, 0x84, 0x8b, 0xcb, 0x31, 0x39, 0xdb, 0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x55, 0x48,
	0x88, 0x8b, 0xa5, 0x20, 0x33, 0x2f, 0x5d, 0x82, 0x51, 0x81, 0x51, 0x83, 0x35, 0x08, 0xcc, 0x06,
	0x8b, 0xe5, 0xe7, 0xa5, 0x4b, 0x30, 0x41, 0xc5, 0xf2, 0xf3, 0xd2, 0x8d, 0xdc, 0xb9, 0x38, 0x82,
	0xa1, 0x26, 0x08, 0x59, 0x73, 0xb1, 0x3b, 0x26, 0x67, 0xfb, 0x25, 0x26, 0x67, 0x0b, 0x89, 0xe8,
	0xc1, 0xed, 0x41, 0x18, 0x2a, 0x85, 0x55, 0x54, 0x89, 0x41, 0x83, 0xd1, 0x80, 0xd1, 0x49, 0x29,
	0x4a, 0x81, 0x90, 0x47, 0x92, 0xd8, 0xc0, 0x6e, 0x36, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x57,
	0x9c, 0xe0, 0x2e, 0xf3, 0x00, 0x00, 0x00,
}
